#include "Timer.h"	
#ifdef ENABLE_MODULE_TIMER

void CWndUserTimer::Create(CWnd *pParent, ui16 dwFlags)
{
	CWnd::Create("CWndUserTimer", dwFlags, CRect(0, 16, 400, 240), pParent);
		
	CRect rcStartPause( 20, m_rcClient.bottom-16, 4 + 120, m_rcClient.bottom );
	m_btnStartPause.Create("Start/Pause", CWnd::WsVisible, rcStartPause, this);

	CRect rcReset( rcStartPause.right + 16, m_rcClient.bottom-16, rcStartPause.right + 16 + 50 + 60, m_rcClient.bottom );
	m_btnReset.Create("Reset", CWnd::WsVisible, rcReset, this);

	CRect rcDigit1( rcReset.right + 16, m_rcClient.bottom-16, rcReset.right + 16 + 10, m_rcClient.bottom );
	m_btnDigit[0].Create("A", CWnd::WsVisible, rcDigit1, this);

	CRect rcDigit2( rcDigit1.right + 16, m_rcClient.bottom-16, rcDigit1.right + 16 + 10, m_rcClient.bottom );
	m_btnDigit[1].Create("B", CWnd::WsVisible, rcDigit2, this);

	CRect rcDigit3( rcDigit2.right + 16, m_rcClient.bottom-16, rcDigit2.right + 16 + 10, m_rcClient.bottom );
	m_btnDigit[2].Create("C", CWnd::WsVisible, rcDigit3, this);

	CRect rcDigit4( rcDigit3.right + 16, m_rcClient.bottom-16, rcDigit3.right + 16 + 10, m_rcClient.bottom );
	m_btnDigit[3].Create("D", CWnd::WsVisible, rcDigit4, this);

	m_nDefault = 1*60 + 0;
	m_nValue = m_nDefault;
	m_bRunning = false;
}

void CWndUserTimer::OnTimer()
{
	if ( m_nValue > 0 )
		m_nValue--;
	else
	{
		if ( m_nBeep > 0 )
		{
			BIOS::SYS::Beep(300);
			m_nBeep--;
		} else
		{
			KillTimer();
			m_bRunning = false;
		}
	}
	DrawNumbers();
}

void CWndUserTimer::DrawNumbers()
{
	char numbers[5];
	BIOS::DBG::sprintf(numbers, "%02d%02d", m_nValue / 60, m_nValue % 60 );
	if ( !m_bRunning )
		DrawNumbers( numbers, RGB565(ffffff), RGB565(c0c0c0), RGB565(e0e0e0) );
	else
		DrawNumbers( numbers, RGB565(ffffff), RGB565(00c0c0), RGB565(80e0e0) );
}

void CWndUserTimer::SetDigit( CBitmap& bmp, int nValue, ui16 clrBack, ui16 clrFront1, ui16 clrFront2 )
{
	const int decoder[] =
	{0x1111110, 0x0110000, 0x1101101, 0x1111001, 0x0110011, 0x1011011, 0x1011111, 0x1110000, 0x1111111, 0x1111011};

	_ASSERT( nValue >= 0 && nValue <= 9 );

	int seg = decoder[nValue];
	bmp.m_arrPalette[0] = clrBack;
	bmp.m_arrPalette[1] =  seg & 0x1000000 ? clrFront1 : clrBack;
	bmp.m_arrPalette[2] =  seg & 0x1000000 ? clrFront2 : clrBack;
	bmp.m_arrPalette[3] =  seg & 0x0100000 ? clrFront1 : clrBack;
	bmp.m_arrPalette[4] =  seg & 0x0100000 ? clrFront2 : clrBack;
	bmp.m_arrPalette[5] =  seg & 0x0010000 ? clrFront1 : clrBack;
	bmp.m_arrPalette[6] =  seg & 0x0010000 ? clrFront2 : clrBack;
	bmp.m_arrPalette[7] =  seg & 0x0001000 ? clrFront1 : clrBack;
	bmp.m_arrPalette[8] =  seg & 0x0001000 ? clrFront2 : clrBack;
	bmp.m_arrPalette[9] =  seg & 0x0000100 ? clrFront1 : clrBack;
	bmp.m_arrPalette[10] = seg & 0x0000100 ? clrFront2 : clrBack;
	bmp.m_arrPalette[11] = seg & 0x0000010 ? clrFront1 : clrBack;
	bmp.m_arrPalette[12] = seg & 0x0000010 ? clrFront2 : clrBack;
	bmp.m_arrPalette[13] = seg & 0x0000001 ? clrFront1 : clrBack;
	bmp.m_arrPalette[14] = seg & 0x0000001 ? clrFront2 : clrBack;
}

char m_arrLastValue[5];
ui16 m_arrLastColor;
void ResetNumbers()
{
	m_arrLastColor = RGB565(ff00ff);
	m_arrLastValue[0] = 0;
	m_arrLastValue[1] = 0;
	m_arrLastValue[2] = 0;
	m_arrLastValue[3] = 0;
}

void CWndUserTimer::DrawNumbers( char* numbers, ui16 clrBack, ui16 clrFront1, ui16 clrFront2 )
{
	if ( m_arrLastColor != clrFront1 )
	{
		ResetNumbers();
	}

	CBitmap bmpDigit;
	bmpDigit.Load( bitmapDigit );

	CBitmap bmpDots;
	bmpDots.Load( bitmapDots );
	bmpDots.m_arrPalette[0] = clrBack;
	bmpDots.m_arrPalette[1] = clrFront1;
	bmpDots.m_arrPalette[2] = clrFront2;
	bmpDots.m_arrPalette[3] = clrBack;
	bmpDots.m_arrPalette[4] = clrBack;

	int x = 50, y = 68;
	if ( m_arrLastValue[0] != numbers[0] )
	{
		SetDigit( bmpDigit, numbers[0] - '0', clrBack, clrFront1, clrFront2 );
		bmpDigit.Blit ( x, y );
	}
	x += bmpDigit.m_width;
	if ( m_arrLastValue[1] != numbers[1] )
	{
		SetDigit( bmpDigit, numbers[1] - '0', clrBack, clrFront1, clrFront2 );
		bmpDigit.Blit ( x, y );
	}
	x += bmpDigit.m_width;
	x += 8;
	bmpDots.Blit ( x, y+12 );
	x += 8;

	x += bmpDots.m_width;
	if ( m_arrLastValue[2] != numbers[2] )
	{
		SetDigit( bmpDigit, numbers[2] - '0', clrBack, clrFront1, clrFront2 );
		bmpDigit.Blit ( x, y );
	}
	x += bmpDigit.m_width;
	if ( m_arrLastValue[3] != numbers[3] )
	{
		SetDigit( bmpDigit, numbers[3] - '0', clrBack, clrFront1, clrFront2 );
		bmpDigit.Blit ( x, y );
	}

	m_arrLastValue[0] = numbers[0];
	m_arrLastValue[1] = numbers[1];
	m_arrLastValue[2] = numbers[2];
	m_arrLastValue[3] = numbers[3];
	m_arrLastColor = clrFront1;
}

void CWndUserTimer::OnPaint()
{
	BIOS::LCD::Bar(m_rcClient, RGB565(ffffff));
	BIOS::LCD::Bar(0, m_rcClient.bottom-20, 400, m_rcClient.bottom, RGB565(808080));
	DrawNumbers();
}

void CWndUserTimer::OnMessage(CWnd* pSender, ui16 code, ui32 data)
{
	if (code == ToWord('L', 'D') )
	{
		m_bRunning = false;
		KillTimer();
		return;
	}

	if (code == ToWord('L', 'E') )
	{
		m_bRunning = false;
		ResetNumbers();
		return;
	}
}

void CWndUserTimer::OnKey(ui16 nKey)
{
	if ( nKey == BIOS::KEY::KeyEnter && GetFocus() == &m_btnStartPause )
	{
		KillTimer();
		m_bRunning = !m_bRunning;
		m_nBeep = 3;
		if ( m_bRunning && m_nValue == 0 )
			m_nValue = m_nDefault;
		DrawNumbers();
		if ( m_bRunning )
			SetTimer(1000);
	}

	if ( nKey == BIOS::KEY::KeyEnter && GetFocus() == &m_btnReset )
	{
		m_nValue = m_nDefault;
		DrawNumbers();
	}

	if ( ( nKey == BIOS::KEY::KeyLeft ) || ( nKey == BIOS::KEY::KeyRight ) )
	{
		int nMul = 0;
		if ( GetFocus() == &m_btnDigit[3] )
			nMul = 1;
		if ( GetFocus() == &m_btnDigit[2] )
			nMul = 10;
		if ( GetFocus() == &m_btnDigit[1] )
			nMul = 60;
		if ( GetFocus() == &m_btnDigit[0] )
			nMul = 600;

		if ( nMul != 0 )
		{
			m_nDefault += ( nKey == BIOS::KEY::KeyLeft ) ? -nMul : nMul;
			UTILS.Clamp<int>( m_nDefault, 0, 60*99 );
			m_nValue = m_nDefault;
			if ( m_nValue )
				m_bRunning = false;
			KillTimer();
			DrawNumbers();
		}
	}
	
	CWnd::OnKey( nKey );
}


LINKERSECTION(".extra")
/*const*/ const unsigned char CWndUserTimer::bitmapDigit[] = {
	0x47, 0x62, 0x43, 0x70, 0x9b, 0x20, 0x02, 0xb4, 0x20, 0x08, 0x20, 0x02, 0xd4, 0x10, 0x2b, 0x40, 0x02, 0x95, 0x10, 0x2a, 0x10, 0x02, 0xc5, 0x10, 0x2d, 0x30, 0x02, 0xb5, 0x10, 0x29, 0x10, 0x04, 
	0x10, 0x02, 0x95, 0x10, 0x2b, 0x30, 0x2c, 0xbc, 0x10, 0x02, 0xf4, 0x10, 0x01, 0x02, 0x43, 0x45, 0x00, 0x32, 0x30, 0x01, 0x00, 0x2c, 0x41, 0x02, 0x10, 0x0c, 0x2b, 0x00, 0xd2, 0x00, 0xb3, 0xb0, 
	0xc1, 0x00, 0x2a, 0x41, 0x02, 0x20, 0x03, 0x33, 0x04, 0x30, 0x03, 0x53, 0x04, 0x10, 0x02, 0x84, 0x10, 0x21, 0x00, 0xc5, 0xb0, 0xca, 0x20, 0x0c, 0x7b, 0x0c, 0x10, 0x02, 0xe3, 0x10, 0x21, 0x00, 
	0x47, 0x30, 0x41, 0x00, 0x48, 0x13, 0x04, 0x20, 0x02, 0xb3, 0x20, 0x01, 0x00, 0xc9, 0x1b, 0x00, 0x82, 0x00, 0xb9, 0x1b, 0x00, 0x84, 0x00, 0x49, 0x13, 0x04, 0x10, 0x04, 0xa1, 0x30, 0x08, 0x40, 
	0x0b, 0x91, 0xb0, 0x08, 0x20, 0x0b, 0x91, 0xb0, 0x08, 0x40, 0x03, 0x91, 0x30, 0x02, 0x00, 0x39, 0x13, 0x00, 0x84, 0x00, 0xc9, 0x1b, 0x0c, 0xf1, 0x00, 0xc9, 0x1b, 0x0c, 0x94, 0x00, 0x39, 0x13, 
	0x00, 0x20, 0x03, 0x91, 0x30, 0x08, 0x40, 0x0c, 0x91, 0xb0, 0xcf, 0x10, 0x0c, 0x91, 0xb0, 0xc9, 0x40, 0x03, 0x91, 0x30, 0x02, 0x00, 0x39, 0x13, 0x04, 0x84, 0x00, 0xc9, 0x1b, 0x0c, 0xf1, 0x00, 
	0xc9, 0x1b, 0x0c, 0x84, 0x00, 0x49, 0x13, 0x04, 0x30, 0x04, 0x91, 0x30, 0x48, 0x40, 0x0c, 0x91, 0xb0, 0xcf, 0x10, 0x0b, 0x91, 0xb0, 0x08, 0x40, 0x04, 0x91, 0x30, 0x43, 0x00, 0x49, 0x13, 0x04, 
	0x94, 0x00, 0xb9, 0x1b, 0x00, 0xe1, 0x00, 0xb9, 0x1b, 0x00, 0x84, 0x00, 0x49, 0x13, 0x04, 0x30, 0x04, 0xa1, 0x30, 0x08, 0x40, 0x0b, 0x91, 0xb0, 0x0e, 0x10, 0x0b, 0x91, 0xb0, 0x08, 0x40, 0x03, 
	0x91, 0x30, 0x04, 0x00, 0x39, 0x13, 0x00, 0x84, 0x00, 0xb9, 0x1b, 0x00, 0xd1, 0x00, 0xc9, 0x1b, 0x0c, 0x94, 0x00, 0x39, 0x13, 0x00, 0x40, 0x03, 0x91, 0x30, 0x08, 0x40, 0x0c, 0x91, 0xb0, 0xcd, 
	0x10, 0x0c, 0x91, 0xb0, 0xc8, 0x40, 0x04, 0xa1, 0x30, 0x04, 0x00, 0x49, 0x13, 0x04, 0x84, 0x00, 0xc9, 0x1b, 0x0c, 0xd1, 0x00, 0xc9, 0x1b, 0x0c, 0x84, 0x00, 0x49, 0x13, 0x04, 0x50, 0x04, 0x91, 
	0x30, 0x49, 0x40, 0x0b, 0x91, 0xb0, 0x0c, 0x10, 0x0b, 0x91, 0xb0, 0x08, 0x40, 0x04, 0x91, 0x30, 0x45, 0x00, 0x49, 0x13, 0x04, 0x94, 0x00, 0xb9, 0x1b, 0x00, 0xc1, 0x00, 0xb9, 0x1b, 0x00, 0x84, 
	0x00, 0x49, 0x13, 0x04, 0x60, 0x03, 0x91, 0x30, 0x08, 0x40, 0x0b, 0x91, 0xb0, 0x0b, 0x10, 0x0c, 0xa1, 0xb0, 0x08, 0x40, 0x03, 0x91, 0x30, 0x06, 0x00, 0x39, 0x13, 0x00, 0x84, 0x00, 0xc9, 0x1b, 
	0x0c, 0xb1, 0x00, 0xc9, 0x1b, 0x0c, 0x94, 0x00, 0x39, 0x13, 0x00, 0x60, 0x03, 0x91, 0x30, 0x08, 0x40, 0x0c, 0x91, 0xb0, 0xcb, 0x10, 0x0c, 0x91, 0xb0, 0xc8, 0x40, 0x04, 0xa1, 0x30, 0x06, 0x00, 
	0x49, 0x13, 0x04, 0x84, 0x00, 0xc9, 0x1b, 0x0c, 0xb1, 0x00, 0xc9, 0x1b, 0x0c, 0x84, 0x00, 0x49, 0x13, 0x04, 0x70, 0x04, 0x91, 0x30, 0x49, 0x40, 0x0b, 0x91, 0xb0, 0x0a, 0x10, 0x0b, 0x91, 0xb0, 
	0x08, 0x40, 0x04, 0x91, 0x30, 0x47, 0x00, 0x49, 0x13, 0x04, 0x94, 0x00, 0xb9, 0x1b, 0x00, 0xa1, 0x00, 0xb7, 0xb0, 0xcb, 0x40, 0x04, 0x81, 0x30, 0x08, 0x10, 0x04, 0x63, 0x00, 0x20, 0x0d, 0xe3, 
	0xd0, 0x01, 0x00, 0xc6, 0xb0, 0x0c, 0x10, 0x0c, 0x4b, 0x00, 0x10, 0x0e, 0x94, 0xd0, 0xe2, 0x00, 0x43, 0x30, 0x4c, 0x10, 0x04, 0x13, 0x04, 0x20, 0x0e, 0xb4, 0xd0, 0xe2, 0x00, 0xc1, 0xb0, 0xc8, 
	0x20, 0x1c, 0xc2, 0x00, 0xde, 0x4d, 0x00, 0x10, 0x14, 0x4a, 0x20, 0x0e, 0x95, 0xd0, 0xef, 0x20, 0x0d, 0x95, 0xd0, 0xee, 0x20, 0x0e, 0x85, 0xd0, 0x0c, 0x20, 0x19, 0xa2, 0x00, 0xec, 0x4d, 0x0e, 
	0x20, 0x26, 0x56, 0xf1, 0x00, 0x51, 0x50, 0x62, 0x00, 0xea, 0x4d, 0x0e, 0x20, 0x0a, 0x29, 0x00, 0xd1, 0x00, 0x93, 0x90, 0xa2, 0x00, 0xef, 0x3d, 0x0e, 0x20, 0x06, 0x45, 0x06, 0xc1, 0x00, 0x66, 
	0x50, 0x62, 0x00, 0xed, 0x3d, 0x0e, 0x20, 0x09, 0x59, 0x0a, 0xa1, 0x00, 0xa8, 0x19, 0x0a, 0x94, 0x00, 0x69, 0x15, 0x00, 0xa1, 0x00, 0x59, 0x15, 0x00, 0x84, 0x00, 0x99, 0x19, 0x00, 0x70, 0x0a, 
	0x91, 0x90, 0xa9, 0x40, 0x05, 0x91, 0x50, 0x0a, 0x10, 0x05, 0x91, 0x50, 0x08, 0x40, 0x0a, 0x91, 0x90, 0xa7, 0x00, 0xa9, 0x19, 0x0a, 0x94, 0x00, 0x58, 0x15, 0x06, 0xb1, 0x00, 0x69, 0x15, 0x06, 
	0x84, 0x00, 0xa9, 0x19, 0x0a, 0x70, 0x0a, 0x91, 0x90, 0xa8, 0x40, 0x06, 0x91, 0x50, 0x6b, 0x10, 0x06, 0x91, 0x50, 0x68, 0x40, 0x0a, 0xa1, 0x90, 0x06, 0x00, 0x99, 0x19, 0x00, 0x84, 0x00, 0x69, 
	0x15, 0x06, 0xb1, 0x00, 0x69, 0x15, 0x06, 0x94, 0x00, 0x99, 0x19, 0x00, 0x60, 0x09, 0x91, 0x90, 0x08, 0x40, 0x06, 0x91, 0x50, 0x6c, 0x10, 0x05, 0x91, 0x50, 0x08, 0x40, 0x09, 0x91, 0x90, 0x06, 
	0x00, 0x99, 0x19, 0x00, 0x84, 0x00, 0x59, 0x15, 0x00, 0xc1, 0x00, 0x59, 0x15, 0x00, 0x84, 0x00, 0xa9, 0x19, 0x0a, 0x50, 0x0a, 0x91, 0x90, 0xa9, 0x40, 0x05, 0x91, 0x50, 0x0c, 0x10, 0x05, 0x91, 
	0x50, 0x08, 0x40, 0x0a, 0x91, 0x90, 0xa5, 0x00, 0xa9, 0x19, 0x0a, 0x94, 0x00, 0x59, 0x15, 0x00, 0xc1, 0x00, 0x69, 0x15, 0x06, 0x84, 0x00, 0xa9, 0x19, 0x0a, 0x50, 0x0a, 0x91, 0x90, 0xa8, 0x40, 
	0x06, 0x91, 0x50, 0x6d, 0x10, 0x06, 0x91, 0x50, 0x69, 0x40, 0x09, 0x91, 0x90, 0x04, 0x00, 0x99, 0x19, 0x00, 0x84, 0x00, 0x69, 0x15, 0x06, 0xd1, 0x00, 0x69, 0x15, 0x06, 0x94, 0x00, 0x99, 0x19, 
	0x00, 0x40, 0x09, 0x91, 0x90, 0x08, 0x40, 0x05, 0x91, 0x50, 0x0e, 0x10, 0x05, 0x91, 0x50, 0x08, 0x40, 0x09, 0x91, 0x90, 0x03, 0x00, 0xaa, 0x19, 0x00, 0x84, 0x00, 0x59, 0x15, 0x00, 0xe1, 0x00, 
	0x59, 0x15, 0x00, 0x84, 0x00, 0xa9, 0x19, 0x0a, 0x30, 0x0a, 0x91, 0x90, 0xa9, 0x40, 0x05, 0x91, 0x50, 0x0e, 0x10, 0x05, 0x91, 0x50, 0x08, 0x40, 0x0a, 0x91, 0x90, 0xa3, 0x00, 0xa9, 0x19, 0x0a, 
	0x84, 0x00, 0x69, 0x15, 0x06, 0xf1, 0x00, 0x69, 0x15, 0x06, 0x84, 0x00, 0xa9, 0x19, 0x0a, 0x30, 0x09, 0x91, 0x90, 0x08, 0x40, 0x06, 0x91, 0x50, 0x6f, 0x10, 0x06, 0x91, 0x50, 0x69, 0x40, 0x09, 
	0x91, 0x90, 0x02, 0x00, 0x99, 0x19, 0x00, 0x84, 0x00, 0x69, 0x15, 0x06, 0xf1, 0x00, 0x69, 0x15, 0x06, 0x94, 0x00, 0x99, 0x19, 0x00, 0x20, 0x09, 0x91, 0x90, 0x08, 0x40, 0x06, 0x91, 0x50, 0x08, 
	0x20, 0x05, 0x91, 0x50, 0x08, 0x40, 0x09, 0x91, 0x90, 0x01, 0x00, 0xa9, 0x19, 0x0a, 0x94, 0x00, 0x69, 0x15, 0x00, 0x82, 0x00, 0x57, 0x50, 0x63, 0x00, 0x8d, 0x38, 0x10, 0xa8, 0x19, 0x0a, 0x20, 
	0x09, 0x69, 0x20, 0x08, 0xf3, 0x70, 0x02, 0x00, 0x66, 0x50, 0x6a, 0x20, 0x05, 0x45, 0x06, 0x30, 0x07, 0x84, 0x70, 0x81, 0x00, 0xa4, 0x90, 0xa4, 0x00, 0x92, 0x90, 0xa1, 0x00, 0x8b, 0x47, 0x00, 
	0x20, 0x06, 0x35, 0x06, 0xc2, 0x00, 0x61, 0x50, 0x62, 0x00, 0x8e, 0x47, 0x20, 0x0a, 0x19, 0x0a, 0x60, 0x39, 0xa0, 0x88, 0x57, 0x08, 0x20, 0x16, 0x5b, 0x30, 0x08, 0xa5, 0x70, 0x8a, 0x10, 0x08, 
	0xc5, 0x70, 0x8d, 0x30, 0x08, 0xc5, 0x70, 0x8b, 0x10, 0x08, 0x85, 0x70, 0x8b, 0x40, 0x08, 0xc4, 0x70, 0x8b, 0x20, 0x08, 0x94, 0x80, 0x0e, 0xa1, 0x00, 
}; 

LINKERSECTION(".extra")
/*static*/ const unsigned char CWndUserTimer::bitmapDots[] = {
	0x47, 0x62, 0x10, 0x66, 0xe8, 0x60, 0x01, 0x31, 0x00, 0x40, 0x01, 0x71, 0x00, 0x70, 0x01, 0x91, 0x11, 0x00, 0xa1, 0x10, 0x25, 0x00, 0x18, 0x31, 0x02, 0x30, 0x02, 0x93, 0x10, 0x23, 0x00, 0x2c, 
	0x11, 0x00, 0xa1, 0x11, 0x22, 0x40, 0x02, 0xa1, 0x10, 0x01, 0x00, 0x17, 0x11, 0x22, 0x60, 0x02, 0x12, 0x01, 0x31, 0x02, 0x70, 0x02, 0x32, 0x00, 0x9b, 0x50, 0x01, 0x31, 0x00, 0x81, 0x00, 0x17, 
	0x10, 0x03, 0x00, 0x19, 0x11, 0x00, 0x30, 0x02, 0xa1, 0x10, 0x01, 0x00, 0x1b, 0x11, 0x00, 0x10, 0x02, 0xc1, 0x11, 0x00, 0xc1, 0x10, 0x21, 0x00, 0x2c, 0x11, 0x10, 0x0c, 0x11, 0x02, 0x10, 0x12, 
	0x2a, 0x11, 0x00, 0x20, 0x01, 0x91, 0x10, 0x23, 0x01, 0x22, 0x81, 0x10, 0x05, 0x00, 0x24, 0x10, 0x21, 0x20, 0x06, 0x00, 0x23, 0x20, 0x0d, 0xd4, 0x00, 0x32, 0x30, 0x03, 0x00, 0x34, 0x30, 0x0d, 
	0x10, 0x03, 0x63, 0x10, 0x47, 0x30, 0x0c, 0x10, 0x03, 0x63, 0x14, 0x47, 0x30, 0x0d, 0x10, 0x03, 0x43, 0x24, 0x40, 0x14, 0x03, 0x23, 0x00, 0x92, 0x00, 0x42, 0x40, 0x08, 0x40, 
}; // 157 bytes

#endif
