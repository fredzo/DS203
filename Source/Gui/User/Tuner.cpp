#include "Tuner.h"

#ifdef ENABLE_MODULE_TUNER

/*virtual*/ void CWndTuner::Create(CWnd *pParent, ui16 dwFlags)
{
	CWnd::Create("CWndTuner", dwFlags | CWnd::WsNoActivate | CWnd::WsListener, CRect(0, 16, 400, 240), pParent);
	m_bWave = false;
}

/*virtual*/ void CWndTuner::OnPaint()
{
	static int nLastNote = -1;
	static int nLastCents = -999;

	CRect rcClient(m_rcClient);
	rcClient.top += 74;
	//BIOS::LCD::Bar(rcClient, RGB565(FFFFFF));
	if ( !m_bWave )
	{
		BIOS::LCD::Bar(m_rcClient, RGB565(FFFFFF));
		BIOS::LCD::Bar(m_rcClient.left, m_rcClient.bottom-16, m_rcClient.right, m_rcClient.bottom, RGB565(b0b0b0));
		CBitmap bmp;
		bmp.Load( bitmapTuner );
		bmp.Blit ( 70, 32 );

		DrawPiano();
		DrawScale();

		CRect rcScale(200, 120, 340, 132);
		BIOS::LCD::Print( rcScale.CenterX()-5*4, rcScale.bottom + 2, RGB565(000000), RGBTRANS, "cents");
		BIOS::LCD::Print( 240, BIOS::LCD::LcdHeight-41, RGB565(ff0000), RGBTRANS, "Spectrum");
	}

	float fBestFreq = GetFundamental();
	if ( fBestFreq == 0 )
	{
		BIOS::LCD::Bar(m_rcClient.left, m_rcClient.bottom-16, m_rcClient.right, m_rcClient.bottom, RGB565(b0b0b0));
		BIOS::LCD::Print( 4, BIOS::LCD::LcdHeight - 16, RGB565(000000), RGB565(b0b0b0), 
			"No signal detected"); 

		if ( nLastNote >= 0 )
		{
			DrawKey( nLastNote, false );
			nLastNote = -1;
		}
		if ( nLastCents != -999 )
		{
			DrawCents( nLastCents, false );
			nLastCents = -999;
		}
		return;
	}

	float fNote = log(fBestFreq/440.0f)/log(2.0f)*12.0f + 9 + 12*4; // 440Hz -> A4

	int nBaseNote = (int)floor(fNote + 0.5f); // +50 cents
	int nOctave = nBaseNote/12;
	int nNote = nBaseNote%12;
	int nCents = (int)((fNote - nBaseNote)*100.0f);

	if ( nNote < 0 )
	{
		BIOS::LCD::Bar(m_rcClient.left, m_rcClient.bottom-16, m_rcClient.right, m_rcClient.bottom, RGB565(b0b0b0));
		BIOS::LCD::Print( 4, BIOS::LCD::LcdHeight - 16, RGB565(000000), RGB565(b0b0b0), 
			"Invalid signal"); 

		if ( nLastNote >= 0 )
		{
			DrawKey( nLastNote, false );
			nLastNote = -1;
		}
		if ( nLastCents != -999 )
		{
			DrawCents( nLastCents, false );
			nLastCents = -999;
		}
		return;
	}

	const char* notes[] = {"C-", "C#", "D-", "D#", "E-", "F-", "F#", "G-", "G#", "A-", "A#", "B-"};
	BIOS::LCD::Printf( 4, BIOS::LCD::LcdHeight - 16, RGB565(000000), RGB565(b0b0b0), 
		"%1f Hz -> Note: %s%d %c%d cents   ", fBestFreq, notes[nNote], nOctave, 
		nCents >= 0 ? '+' : '-', abs(nCents));

	if ( nLastNote > -1 )
		DrawKey( nLastNote, false );
	nLastNote = nNote;
	DrawKey( nNote, true );

	if ( nLastCents != -999 )
		DrawCents( nLastCents, false );
	nLastCents = nCents;
	DrawCents( nLastCents, true );
}

void CWndTuner::DrawScale()
{
	/*
     -50     -25     0     25      50
	 |--------|------|------|-------|
	              
	*/
	CRect rcScale(200, 120, 340, 132);
	BIOS::LCD::Bar( rcScale, RGB565(808080) );
	for (int i=0; i<8; i++)
	{
		CRect rcSegment;
		rcSegment.top = rcScale.top;
		rcSegment.bottom = rcScale.bottom - 2;
		rcSegment.left = rcScale.left+1 + (rcScale.Width()-2)*i/8 + 1;
		rcSegment.right = rcScale.left+1 + (rcScale.Width()-2)*(i+1)/8 - 1;
		ui16 clr = RGB565(ffffff);
		BIOS::LCD::Bar( rcSegment, clr );

		switch (i)
		{
			case 2:
				BIOS::LCD::Print( rcSegment.left-3*4-2, rcSegment.top - 20, RGB565(000000), RGBTRANS, "-25");
				break;
			case 4:
				BIOS::LCD::Print( rcSegment.left-1*4-2, rcSegment.top - 20, RGB565(000000), RGBTRANS, "0");
				break;
			case 6:
				BIOS::LCD::Print( rcSegment.left-3*4-2, rcSegment.top - 20, RGB565(000000), RGBTRANS, "+25");
				break;
		}

		rcSegment.top = rcSegment.bottom - 2;
		
		clr = RGB565(ff0000);
		if ( i>=1 && i<=6 )
			clr = RGB565(ff8000);
		if ( i>=2 && i<=5 )
			clr = RGB565(ffff00);
		if ( i==3 || i==4 )
			clr = RGB565(00ff00);
		BIOS::LCD::Bar( rcSegment, clr );

	}
}

void CWndTuner::DrawCents(int nCents, bool bShow )
{
	CRect rcScale(200, 120, 340, 132);
	int x = rcScale.left+(nCents+50)*rcScale.Width()/100;
	BIOS::LCD::Draw(x-4, rcScale.bottom, bShow ? RGB565(000000) : RGB565(ffffff), RGBTRANS, CShapes::triangle);
}

void CWndTuner::DrawKey(int nKey, bool bEnabled)
{
	const int arrFull[] = {0, -1, 1, -2, 2, 3, -4, 4, -5, 5, -6, 6};
	const char* notes[] = {"C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"};
	CRect rc;
	int nFull = arrFull[nKey];
	if ( nFull >= 0 )
	{
		rc = CRect(nFull*20, 45, nFull*20+18, 80);
		rc.Offset(40, 100);
		BIOS::LCD::Bar( rc, bEnabled ? RGB565(ff0000) : RGB565(b0b0b0) );

		if ( bEnabled )
		{
			BIOS::LCD::Print(rc.CenterX()-4+1, rc.bottom-20+1, RGB565(800000), RGBTRANS, notes[nKey] );
			BIOS::LCD::Print(rc.CenterX()-4, rc.bottom-20, RGB565(ffff00), RGBTRANS, notes[nKey] );
		}

		int nCutLeft = 7, nCutRight = 4;
		if ( nKey == 0 || arrFull[nKey-1] >= 0 )
			nCutLeft = 0;
		if ( nKey == 11 || arrFull[nKey+1] >= 0 )
			nCutRight = 0;
		rc = CRect(nFull*20+nCutLeft, 0, nFull*20+18-nCutRight, 45);
		rc.Offset(40, 100);
		BIOS::LCD::Bar( rc, bEnabled ? RGB565(ff0000) : RGB565(b0b0b0) );
	} else
	{
		int nHalf = - nFull-1;
		CRect rc(nHalf*20+9+4, 0, nHalf*20+18+9-4, 40);
		rc.Offset(40, 100);
		BIOS::LCD::Bar( rc, bEnabled ? RGB565(ff0000) : RGB565(000000) );
	}
}

void CWndTuner::DrawPiano()
{
	for (int i=0; i<7; i++)
	{
		CRect rc(i*20, 0, i*20+18, 80);

		rc.Offset(40, 100);

		rc.Offset(4, 4);
		BIOS::LCD::Bar( rc, RGB565(f0f0f0) );
		rc.Offset(-1, -1);
		BIOS::LCD::Bar( rc, RGB565(e0e0e0) );
		rc.Offset(-1, -1);
		BIOS::LCD::Bar( rc, RGB565(d0d0d0) );
		rc.Offset(-1, -1);
		BIOS::LCD::Bar( rc, RGB565(c0c0c0) );
		rc.Offset(-1, -1);
		BIOS::LCD::Bar( rc, RGB565(b0b0b0) );
	}

	for (int i=0; i<6; i++)
	{
		if ( i==2 )
			continue;
		CRect rc(i*20+9+4, 0, i*20+18+9-4, 40);

		rc.Offset(40, 100);

		rc.Offset(4, 4);
		BIOS::LCD::Bar( rc, RGB565(b0b0b0) );
		rc.Offset(-1, -1);
		BIOS::LCD::Bar( rc, RGB565(808080) );
		rc.Offset(-1, -1);
		BIOS::LCD::Bar( rc, RGB565(606060) );
		rc.Offset(-1, -1);
		BIOS::LCD::Bar( rc, RGB565(404040) );
		rc.Offset(-1, -1);
		BIOS::LCD::Bar( rc, RGB565(000000) );
	}
}

/*virtual*/ void CWndTuner::OnMessage(CWnd* pSender, ui16 code, ui32 data)
{
	static int nOldResolution, nOldSync;

 	if ( pSender == NULL && code == WmBroadcast && data == ToWord('d', 'g') )
	{
		m_bWave = true;
		Invalidate();
		m_bWave = false;
		return;
	}

	// LAYOUT ENABLE/DISABLE FROM TOP MENU BAR
	if (code == ToWord('L', 'D') )
	{
		Settings.Time.Resolution = (CSettings::TimeBase::EResolution)nOldResolution;
		Settings.Trig.Sync = (CSettings::Trigger::ESync)nOldSync;
		CCoreOscilloscope::ConfigureAdc();
		return;
	}

	if (code == ToWord('L', 'E') )
	{
		nOldResolution = Settings.Time.Resolution;
		nOldSync = Settings.Trig.Sync;
		Settings.Time.Resolution = CSettings::TimeBase::_5ms;
		Settings.Trig.Sync = CSettings::Trigger::_Scan;
		CCoreOscilloscope::ConfigureAdc();
		return;
	}
}

float CWndTuner::GetFundamental()
{
	int nLength = 1024;
	si16* pWaveformR = (si16*)(PVOID)&BIOS::ADC::GetAt(4096-2048);
	si16* pWaveformI = pWaveformR + nLength;

	CFft<1024> fft;

	CRect rcSpec(200, 150, 340, 200 );
	//BIOS::LCD::Bar(rcSpec, RGB565(808080));

	int nOffset = Settings.Time.InvalidFirst;

	for ( int i = 0; i < nLength; i++ )
	{
		BIOS::ADC::SSample Sample;
		Sample.nValue = BIOS::ADC::GetAt( nOffset + i );
		int nSample = Sample.CH1;
		int nWindow = fft.Hann( i );
		nSample = ( nSample * nWindow ) >> (16-7);
		/*
		int nY = 20+nSample/100;
		UTILS.Clamp<int>(nY, 0, BIOS::LCD::LcdHeight-1);
		BIOS::LCD::PutPixel( i*BIOS::LCD::LcdWidth/1024, nY, RGB565(b0b0b0));
		*/
		pWaveformR[i] = nSample;
		pWaveformI[i] = 0;
	}

	fft.Forward( pWaveformR, pWaveformI );

	float fSampling = CWndGraph::BlkX / Settings.Runtime.m_fTimeRes;
	float fFreqBegin = 60;
	float fFreqEnd = 1300;
	int nIndexBegin = (int)(fFreqBegin * nLength / ( 0.5f * fSampling ));
	int nIndexEnd = (int)(fFreqEnd * nLength / ( 0.5f * fSampling ));

	float fBestIndex = (float)nIndexBegin;
	int nBestAmplSq = 0;
	int nAmplSq[3] = {0, 0, 0};
	const ui16 arrPattern[] = { RGB565(ff8080), RGB565(ff0000), RGB565(ff1010), RGB565(ffd0d0) };

	_ASSERT( nIndexBegin > 5 && nIndexEnd - nIndexBegin > 200 );

	int nAverage = 0;
	int nSpecPrevX = 0;
	int nSpecMax = 0;

	for (int i=nIndexBegin-2; i<nIndexEnd; i++)
	{
		/*
			Searching peak value max(Z[i]), for better location of fundamental we should
			search for max(Z[i]+Z[i*2]+Z[i*4]) 
		*/
		nAmplSq[0] = nAmplSq[1];
		nAmplSq[1] = nAmplSq[2];
		nAmplSq[2] = pWaveformR[i+1]*pWaveformR[i+1] + pWaveformI[i+1]*pWaveformI[i+1];
		nAverage += nAmplSq[2];
		/*
		int nX = (i-nIndexBegin-2)*BIOS::LCD::LcdWidth/(nIndexEnd - nIndexBegin + 2);
		int nY = fft.Sqrt( nAmplSq[2] )/30;
		UTILS.Clamp<int>(nY, 0, 150);
		BIOS::LCD::Line(nX, BIOS::LCD::LcdHeight-1, nX, BIOS::LCD::LcdHeight-nY-1, RGB565(ff0000));
		*/

		int nSpecDispX = (i-nIndexBegin)*rcSpec.Width()/(nIndexEnd-nIndexBegin);
		nSpecDispX = max( nSpecDispX, 0 );
		nSpecMax = max(nSpecMax, nAmplSq[1]);
		if ( nSpecPrevX <= nSpecDispX-4 )
		{
			int nSpecY = fft.Sqrt( nSpecMax );
			nSpecY /= 16;
			nSpecY += 1;
			UTILS.Clamp<int>(nSpecY, 0, rcSpec.Height() );
			for (int x=nSpecPrevX+1; x<nSpecDispX; x++)
			{
				int _x = rcSpec.left + x;
				BIOS::LCD::Line( _x, rcSpec.top, _x, rcSpec.bottom-nSpecY, RGB565(ffffff));
				BIOS::LCD::Pattern( _x, rcSpec.bottom-nSpecY, _x+1, rcSpec.bottom, arrPattern, COUNT(arrPattern) );
			}
			nSpecMax = 0;
			nSpecPrevX = nSpecDispX;
		}

		if ( i > nIndexBegin && nAmplSq[0] < nAmplSq[1] && nAmplSq[2] < nAmplSq[1] )
		{
			if ( nAmplSq[1] > nBestAmplSq )
			{
				// parabolic interpolation to find accurate frequency
				int nAmpl[3] = { fft.Sqrt(nAmplSq[0]*256), fft.Sqrt(nAmplSq[1]*256), fft.Sqrt(nAmplSq[2]*256) };
					
				/*
					I have found this formula in "Improving fft frequency measurement resolution by parabollic
					and gaussian interpolation" by M. Gasior, J.L. Gonzales, CERN
				*/
				float fNom = (float)nAmpl[2]-nAmpl[0];
				float fDenom = 2.0f * ( 2*nAmpl[1]-nAmpl[2]-nAmpl[0] );
				if ( fDenom != 0 )
					fBestIndex = i + fNom/fDenom;
				else 
					fBestIndex = (float)i;

				nBestAmplSq = nAmplSq[1];
			}
		}
	}
		
	// fundamental or harmonic, it doesn't matter, the note is the same,
	// only octave will be incorrect

	nAverage /= nIndexEnd-nIndexBegin+2;
	if ( nBestAmplSq < nAverage*9 || nBestAmplSq < 200*200 )
		return 0;

	return fBestIndex/nLength*(fSampling);
}

LINKERSECTION(".extra")
/*const*/ const unsigned char CWndTuner::bitmapTuner[] = {
	0x47, 0x42, 0xed, 0x01, 0x32, 0xff, 0xff, 0xff, 0xff, 0x10, 0x17, 0x10, 0x30, 0x41, 0xb4, 0x08, 0x24, 0x73, 0x56, 0x7b, 0xd0, 0x9c, 0xd3, 0xad, 0x76, 0xbd, 0xf8, 0xf7, 0x9e, 0xde, 0xdb, 0xce, 
	0x79, 0xff, 0xdf, 0xe7, 0x3c, 0xa9, 0xf1, 0x01, 0xa7, 0x25, 0x0a, 0x1e, 0x01, 0x21, 0x00, 0xd8, 0x20, 0x09, 0x37, 0x05, 0x81, 0x50, 0xd1, 0xe0, 0x12, 0x10, 0x08, 0xb1, 0x00, 0x11, 0xe3, 0xbb, 
	0xf7, 0x92, 0x50, 0x71, 0x70, 0x0e, 0xf1, 0x01, 0x11, 0x1e, 0x2b, 0xba, 0x65, 0x0c, 0xf4, 0x01, 0x19, 0x25, 0x57, 0xac, 0x75, 0x71, 0xf0, 0xb1, 0xe0, 0x13, 0x00, 0xa1, 0x00, 0x1a, 0xe1, 0x01, 
	0x88, 0xe2, 0x53, 0x7d, 0xcf, 0x1b, 0x0e, 0x11, 0x00, 0xea, 0x10, 0x11, 0xe1, 0xb2, 0xcc, 0xd1, 0xa3, 0x99, 0xa9, 0x4a, 0x08, 0x27, 0x05, 0xb1, 0x51, 0x7b, 0xbd, 0x10, 0x01, 0x21, 0x7e, 0x17, 
	0x57, 0xb0, 0x11, 0xe3, 0xbf, 0xcd, 0x15, 0x09, 0x1d, 0x1c, 0x82, 0x51, 0x71, 0xb4, 0x00, 0x72, 0x51, 0xac, 0x1d, 0xca, 0x85, 0x7a, 0xdc, 0xfb, 0xe1, 0x09, 0x15, 0x27, 0xeb, 0x2e, 0x11, 0x1a, 
	0xd1, 0x00, 0x97, 0x50, 0x72, 0x73, 0x55, 0x78, 0x59, 0x48, 0x98, 0x98, 0x19, 0x4a, 0xac, 0xfb, 0x11, 0x00, 0xea, 0x10, 0x51, 0xeb, 0xfc, 0xa1, 0x90, 0x8b, 0x18, 0x07, 0x25, 0x07, 0x19, 0x2a, 
	0xa8, 0x17, 0x05, 0x15, 0x0a, 0xad, 0x10, 0x01, 0x1e, 0x1b, 0xb2, 0xf0, 0x51, 0x55, 0x11, 0xef, 0xcd, 0x1a, 0x35, 0x57, 0x91, 0xa2, 0xdc, 0xd2, 0x50, 0x7f, 0x30, 0x1e, 0x72, 0x51, 0xcc, 0x1a, 
	0x09, 0x19, 0x35, 0x57, 0x91, 0xa4, 0xcf, 0xbe, 0x81, 0x51, 0x8f, 0x1c, 0x4f, 0xfb, 0xe1, 0x9d, 0x10, 0x41, 0xe8, 0xad, 0x1a, 0x09, 0x19, 0x18, 0x82, 0x50, 0x73, 0x70, 0x81, 0x85, 0x98, 0x98, 
	0x98, 0x19, 0x6a, 0xdc, 0xfb, 0xe1, 0xfa, 0x10, 0x41, 0x1e, 0xbf, 0x1d, 0x0a, 0x5a, 0x29, 0xa9, 0x18, 0x07, 0x27, 0x05, 0x15, 0x07, 0x28, 0x79, 0x9a, 0xcf, 0xbe, 0x19, 0xd1, 0x03, 0x1e, 0xbf, 
	0x3d, 0x0c, 0x25, 0x7c, 0xbf, 0xda, 0x9a, 0x91, 0x50, 0x72, 0x93, 0xaa, 0xcd, 0x25, 0x07, 0xc3, 0x00, 0x92, 0x51, 0xdc, 0x1a, 0x09, 0x29, 0x45, 0x57, 0xa9, 0x1a, 0x3d, 0xfb, 0x71, 0x51, 0xdc, 
	0x2a, 0x4d, 0xcb, 0xe1, 0xf7, 0x03, 0xd5, 0x8e, 0x41, 0x20, 0x0a, 0x15, 0x1e, 0xe3, 0x10, 0x0c, 0x20, 0x61, 0xeb, 0xfd, 0xa9, 0x28, 0x07, 0x25, 0x08, 0x27, 0x28, 0x89, 0x1a, 0x0d, 0x5d, 0x2c, 
	0xcf, 0x1b, 0x0e, 0x11, 0x00, 0xfa, 0x10, 0x21, 0x1e, 0x2b, 0x0f, 0x6f, 0x3c, 0xda, 0x91, 0x83, 0x77, 0x87, 0x25, 0x09, 0x19, 0x6a, 0xac, 0xfb, 0xe1, 0xc2, 0x01, 0x11, 0x1e, 0x2b, 0xbc, 0x25, 
	0x0d, 0x11, 0x0e, 0x3e, 0x07, 0x15, 0x0c, 0xe7, 0x00, 0x11, 0xb3, 0xcd, 0xa9, 0x1a, 0x1c, 0x71, 0x50, 0xa1, 0xc1, 0xa9, 0x1a, 0x09, 0x15, 0x14, 0xa2, 0x93, 0xaa, 0xda, 0x25, 0x0d, 0xf2, 0x02, 
	0x1b, 0x31, 0x51, 0x8c, 0x1a, 0x08, 0x19, 0x1a, 0x71, 0x54, 0x7d, 0xa9, 0xa1, 0xd3, 0xf4, 0x53, 0x1d, 0x0a, 0x19, 0x5a, 0xdf, 0xbe, 0x1c, 0x70, 0x21, 0xe4, 0x15, 0x0f, 0x3b, 0x3e, 0xe1, 0x31, 
	0x51, 0x4b, 0x1f, 0x3b, 0xbe, 0x1c, 0x20, 0x41, 0xeb, 0xfc, 0x1d, 0x2a, 0xa7, 0x15, 0x03, 0x48, 0x39, 0xac, 0xf2, 0xb0, 0xe6, 0xe0, 0x11, 0x10, 0x0b, 0xc1, 0x00, 0x12, 0x05, 0xeb, 0xfd, 0xa9, 
	0x28, 0x1a, 0x91, 0x51, 0x3d, 0x2c, 0x2f, 0xbe, 0x11, 0x00, 0xb2, 0x03, 0x1e, 0xbf, 0x2c, 0x09, 0x25, 0x0c, 0x1e, 0x2b, 0xfc, 0x1f, 0x09, 0x15, 0x07, 0xd7, 0x04, 0x11, 0xbf, 0xc1, 0xa4, 0x99, 
	0xad, 0x81, 0x51, 0x9c, 0x5a, 0x03, 0x15, 0x17, 0xa3, 0x92, 0xac, 0x61, 0x51, 0x71, 0xd2, 0x00, 0x91, 0x51, 0x4d, 0x1a, 0x09, 0x19, 0x1a, 0x42, 0x52, 0xad, 0xa1, 0x96, 0xad, 0xc3, 0x54, 0xc1, 
	0xa7, 0x99, 0xad, 0xcb, 0xe1, 0xd7, 0x00, 0xd1, 0x53, 0x6f, 0xcd, 0x1c, 0x7f, 0xbe, 0xb3, 0x5a, 0xc2, 0xd3, 0xcf, 0xbe, 0xd2, 0x00, 0x11, 0xe1, 0xbb, 0x1f, 0x07, 0x15, 0x16, 0xa1, 0x97, 0x89, 
	0xad, 0xfb, 0xe1, 0xde, 0x10, 0x01, 0x1e, 0x2f, 0xca, 0x39, 0x5a, 0xd5, 0x35, 0xd2, 0xe0, 0x11, 0x10, 0x0c, 0x20, 0x3e, 0xbf, 0xc3, 0xa1, 0xcb, 0x1e, 0x3b, 0xfc, 0xa2, 0x52, 0x47, 0x51, 0x30, 
	0xbc, 0x70, 0x61, 0x1e, 0xfc, 0xda, 0x19, 0x2a, 0xd9, 0x15, 0x28, 0xca, 0x29, 0x6a, 0xd6, 0x53, 0x54, 0x19, 0x88, 0x9a, 0xd9, 0x35, 0x3b, 0xa2, 0x06, 0xe6, 0x53, 0x7d, 0xa3, 0x90, 0xd2, 0x52, 
	0x6d, 0xa2, 0x92, 0xad, 0xc1, 0x31, 0x6c, 0x1a, 0x79, 0x9a, 0xdf, 0xbe, 0x1c, 0x70, 0x61, 0x65, 0x35, 0x35, 0x23, 0x29, 0xdf, 0x2b, 0x3f, 0xda, 0x91, 0xa3, 0xdf, 0xbe, 0xf2, 0x00, 0x11, 0x15, 
	0xe4, 0x35, 0x8d, 0x19, 0x78, 0x9a, 0xcf, 0xbe, 0x18, 0xf1, 0x0e, 0x1e, 0xbc, 0xda, 0x98, 0x9a, 0xd3, 0x53, 0x9a, 0x30, 0x41, 0xbf, 0xcd, 0x2a, 0x7c, 0xcf, 0xbf, 0xcd, 0x91, 0x81, 0x77, 0x13, 
	0x65, 0x35, 0x48, 0x6b, 0xa7, 0x05, 0x1e, 0xbc, 0xda, 0x19, 0x7a, 0xda, 0x53, 0x8d, 0xa3, 0x98, 0xac, 0x63, 0x6d, 0xa9, 0x81, 0x95, 0xdd, 0x45, 0x3a, 0x82, 0x04, 0x13, 0x53, 0x91, 0xa0, 0x91, 
	0x93, 0xad, 0xcf, 0x1c, 0x5d, 0xa9, 0x89, 0xa1, 0xd3, 0x35, 0x6d, 0x1a, 0x09, 0x1a, 0x4c, 0xfb, 0xe1, 0x97, 0x00, 0xb2, 0x30, 0x51, 0x32, 0x7a, 0x93, 0x84, 0x9a, 0xdf, 0xb1, 0xf0, 0xc3, 0xd3, 
	0xcb, 0xe1, 0x93, 0x07, 0x13, 0x53, 0x8a, 0x98, 0x19, 0x3a, 0xcf, 0xb1, 0x10, 0x0f, 0x70, 0x01, 0x31, 0x2b, 0x36, 0x91, 0x00, 0x11, 0x13, 0xe1, 0xf4, 0x13, 0x09, 0xd3, 0x0b, 0x1e, 0xbf, 0xda, 
	0x98, 0x9a, 0xd4, 0x13, 0x09, 0xd2, 0x00, 0x12, 0x12, 0xee, 0xd1, 0x32, 0x49, 0xc1, 0xf5, 0xbf, 0xcd, 0xa9, 0x18, 0x07, 0x18, 0x29, 0xa8, 0x23, 0x25, 0x4f, 0x11, 0x2e, 0x1a, 0x23, 0x18, 0xba, 
	0x20, 0x01, 0x11, 0x3e, 0xe1, 0x41, 0x31, 0x8b, 0x10, 0x01, 0x31, 0x2b, 0x36, 0x81, 0x05, 0x1e, 0xbc, 0xda, 0x19, 0x2a, 0xda, 0x13, 0x26, 0xcd, 0x39, 0x1a, 0xc1, 0xf2, 0xbc, 0xd1, 0x94, 0x89, 
	0xad, 0x71, 0x30, 0x8e, 0x10, 0x0b, 0x23, 0x3a, 0xa9, 0x81, 0x92, 0xdc, 0xf1, 0xb1, 0xfc, 0x1a, 0x19, 0xa1, 0xd0, 0xc1, 0x34, 0x6c, 0xa9, 0x71, 0x33, 0xcf, 0xbe, 0x11, 0x30, 0x93, 0x61, 0x11, 
	0xc4, 0x13, 0x0c, 0x3e, 0x21, 0x19, 0x43, 0x09, 0x1b, 0x0e, 0x1e, 0x16, 0x35, 0x10, 0x08, 0x10, 0x0a, 0x53, 0x0b, 0x1b, 0x0e, 0x1e, 0x0f, 0x13, 0x24, 0xa9, 0x28, 0x07, 0x18, 0x49, 0xa4, 0x3c, 
	0x2b, 0x26, 0x35, 0x13, 0x06, 0x2b, 0x2e, 0xe1, 0xc2, 0x00, 0xb2, 0x33, 0x8a, 0x98, 0x19, 0x4a, 0xcf, 0xe1, 0xc3, 0x01, 0xc4, 0x33, 0x06, 0x1b, 0x1e, 0xe1, 0x14, 0x00, 0x93, 0x61, 0x11, 0xc4, 
	0x13, 0x0c, 0x3e, 0x11, 0x15, 0x00, 0x11, 0xe0, 0xb2, 0xb0, 0x82, 0x32, 0x9e, 0x61, 0x30, 0x91, 0x11, 0xeb, 0x2f, 0x06, 0x53, 0x0d, 0x21, 0x34, 0x38, 0xe1, 0x12, 0x83, 0xd5, 0x1f, 0x63, 0x91, 
	0xc3, 0x4f, 0x10, 0x1e, 0xbf, 0xda, 0x09, 0x08, 0x19, 0x1d, 0x41, 0x31, 0x81, 0xa2, 0x03, 0x11, 0xeb, 0x1f, 0x1c, 0x44, 0x30, 0x62, 0xf3, 0x33, 0x7a, 0x19, 0x28, 0x87, 0x18, 0x19, 0x91, 0x31, 
	0x6e, 0x1b, 0x2f, 0xfc, 0x63, 0x19, 0xe1, 0x10, 0xd1, 0x30, 0x92, 0x10, 0xe3, 0xe2, 0x43, 0x61, 0xb2, 0xfc, 0x65, 0x32, 0x61, 0xe3, 0xb0, 0x82, 0x32, 0x9e, 0x61, 0x31, 0x91, 0x1e, 0x2b, 0xfa, 
	0x33, 0x06, 0x1a, 0x43, 0x36, 0xfc, 0x1d, 0x9a, 0xdc, 0xfb, 0xeb, 0xfd, 0xa2, 0x92, 0xaa, 0x61, 0x30, 0x6c, 0x10, 0x0b, 0x23, 0x39, 0xa9, 0x81, 0x92, 0xdc, 0xb2, 0xe0, 0xb1, 0xf0, 0xc1, 0xc6, 
	0xfb, 0x43, 0x6a, 0x43, 0x33, 0x4d, 0xcf, 0x1b, 0x0c, 0x13, 0x24, 0xb6, 0x23, 0x18, 0xf1, 0xc3, 0xff, 0xb6, 0x23, 0x19, 0xc1, 0x31, 0x8d, 0x1c, 0x0a, 0x13, 0x0a, 0x1b, 0x56, 0x34, 0xeb, 0x42, 
	0x30, 0xa1, 0xb0, 0x92, 0x34, 0x9c, 0x83, 0x41, 0xd0, 0xc2, 0xf3, 0x33, 0x49, 0x48, 0x09, 0x1a, 0x08, 0x13, 0x09, 0x1f, 0x06, 0x23, 0x39, 0x63, 0x41, 0xd4, 0xcf, 0xbe, 0x1a, 0x20, 0x0b, 0x23, 
	0x38, 0xa9, 0x81, 0x94, 0xdc, 0xbe, 0x11, 0x00, 0xc2, 0x31, 0xbc, 0x13, 0x06, 0x1b, 0x0e, 0x1e, 0x0c, 0x13, 0x36, 0xed, 0x41, 0x30, 0x41, 0xb0, 0xd2, 0x31, 0x6c, 0x13, 0x08, 0x1d, 0x4f, 0xfb, 
	0xef, 0x13, 0x24, 0xb6, 0x23, 0x18, 0xf1, 0xc4, 0xff, 0xbe, 0x14, 0x02, 0x1e, 0xb1, 0xf1, 0x96, 0x1d, 0x1c, 0x62, 0x3b, 0x4c, 0x43, 0x4e, 0xbf, 0xda, 0x9a, 0x13, 0x2a, 0xc8, 0x13, 0x34, 0xdf, 
	0xa3, 0x31, 0x9c, 0x13, 0x16, 0xe1, 0xb2, 0xfb, 0x61, 0x32, 0x6b, 0xd1, 0x32, 0x4b, 0x01, 0x14, 0xbf, 0xda, 0x91, 0x82, 0x9d, 0x41, 0x30, 0x6a, 0x20, 0x41, 0xef, 0xcd, 0x1a, 0x57, 0x34, 0xcd, 
	0x41, 0x33, 0x6f, 0xc6, 0x13, 0x1d, 0xd1, 0xa2, 0x88, 0x71, 0x80, 0x91, 0x32, 0x6f, 0xc1, 0xa0, 0x91, 0x31, 0x6d, 0x1c, 0x04, 0x13, 0x0a, 0x1f, 0x06, 0x33, 0x1d, 0x61, 0x33, 0x4a, 0xf6, 0x13, 
	0x1d, 0xa1, 0x95, 0x33, 0xac, 0xd4, 0x13, 0x39, 0xf9, 0x61, 0xd1, 0xc6, 0x23, 0x74, 0xc4, 0x34, 0xbf, 0xc1, 0xd0, 0x85, 0x30, 0x81, 0x30, 0x91, 0xb0, 0xf1, 0xf0, 0xb1, 0xe7, 0x11, 0xbf, 0xca, 
	0x98, 0x19, 0x1d, 0x41, 0x30, 0x9a, 0x10, 0x1e, 0x41, 0x39, 0x6a, 0x98, 0x9a, 0xdc, 0xbe, 0x21, 0x0e, 0x2e, 0x0b, 0x1e, 0x02, 0x43, 0x04, 0x13, 0x07, 0x19, 0x3a, 0xdc, 0x61, 0x31, 0x94, 0x23, 
	0x04, 0x1a, 0x06, 0x13, 0x16, 0xa1, 0x30, 0x41, 0xc1, 0xd6, 0x13, 0x08, 0x19, 0x06, 0x13, 0x1a, 0x92, 0x31, 0x48, 0x33, 0xa6, 0xcd, 0xc2, 0x34, 0xdc, 0xd9, 0x13, 0x57, 0x89, 0xad, 0xc1, 0x32, 
	0x6a, 0x91, 0x87, 0x99, 0xdc, 0xf4, 0x34, 0x1c, 0x09, 0x23, 0x4a, 0xd6, 0x34, 0x18, 0x59, 0xac, 0xfb, 0x18, 0x20, 0x21, 0xb4, 0x13, 0x38, 0xa9, 0x81, 0x94, 0xdc, 0xbe, 0x11, 0x00, 0x41, 0x32, 
	0x9f, 0xd2, 0x30, 0xc1, 0xc2, 0xff, 0x91, 0x31, 0x66, 0x33, 0x38, 0xcd, 0x41, 0x36, 0x6c, 0xd4, 0x36, 0x81, 0x93, 0xac, 0xf9, 0x13, 0x19, 0x42, 0x30, 0x41, 0xa0, 0x61, 0x34, 0x6c, 0xfb, 0xe1, 
	0x10, 0x01, 0x16, 0xeb, 0xfc, 0xda, 0x61, 0x31, 0x46, 0x13, 0x44, 0x43, 0x46, 0x12, 0x3c, 0xca, 0x92, 0x85, 0x43, 0x6a, 0xd4, 0x13, 0x06, 0x1a, 0x96, 0x32, 0x32, 0x64, 0x32, 0xf1, 0xd5, 0xad, 
	0x63, 0x26, 0x1c, 0x36, 0x23, 0x92, 0x14, 0xbf, 0xca, 0x91, 0x82, 0x9d, 0x41, 0x30, 0x69, 0x20, 0x41, 0xbf, 0xda, 0x28, 0x07, 0x13, 0xf6, 0xa6, 0x32, 0x4d, 0xc6, 0x32, 0x9b, 0xcd, 0x92, 0x86, 
	0x99, 0x32, 0x6d, 0x91, 0x80, 0x71, 0x31, 0x49, 0x1d, 0x09, 0x13, 0x06, 0x2a, 0x94, 0x32, 0x42, 0x63, 0x23, 0x21, 0x61, 0x33, 0x28, 0x06, 0x13, 0x88, 0xad, 0xa2, 0x34, 0xd6, 0x13, 0x14, 0x61, 
	0x36, 0x44, 0x34, 0x63, 0x41, 0xa0, 0x92, 0x86, 0x43, 0x48, 0x43, 0x21, 0x30, 0xa2, 0xe2, 0x94, 0xb3, 0x14, 0xef, 0xca, 0x91, 0x86, 0x9a, 0x32, 0x3c, 0x18, 0x10, 0x66, 0x23, 0x4a, 0x98, 0x19, 
	0x4d, 0xcb, 0xe1, 0x20, 0x26, 0x2c, 0x2e, 0x14, 0x21, 0x34, 0x49, 0x73, 0x23, 0x74, 0x49, 0x62, 0x31, 0x23, 0x49, 0x32, 0x23, 0x12, 0x61, 0x89, 0x23, 0x8d, 0xa8, 0x23, 0x27, 0x18, 0x54, 0x23, 
	0x42, 0x41, 0x32, 0x43, 0x61, 0x30, 0x22, 0x93, 0x83, 0x26, 0x1a, 0x49, 0x83, 0x24, 0x28, 0x69, 0xd4, 0x34, 0xda, 0x29, 0x94, 0x4f, 0xb4, 0x34, 0xfd, 0x61, 0x35, 0x4a, 0x98, 0x67, 0x38, 0x4a, 
	0xdf, 0xbe, 0x82, 0x01, 0x14, 0x12, 0x39, 0xa9, 0x81, 0x96, 0xdc, 0xbe, 0x10, 0xb1, 0x20, 0x41, 0xc3, 0xa4, 0x32, 0x29, 0x3a, 0xd6, 0x31, 0x24, 0x34, 0x23, 0x42, 0x8f, 0x32, 0x38, 0xa8, 0x32, 
	0x78, 0x78, 0x9a, 0xc6, 0x13, 0x52, 0x34, 0x93, 0x22, 0x31, 0x27, 0x19, 0x4d, 0xcf, 0xbe, 0x21, 0x0e, 0x1b, 0x3f, 0xda, 0x91, 0x81, 0x74, 0x22, 0x44, 0x89, 0x63, 0x12, 0x44, 0xca, 0x67, 0x28, 
	0x07, 0x12, 0x56, 0x94, 0x32, 0x41, 0x82, 0x72, 0x31, 0x61, 0x23, 0x12, 0x0a, 0x39, 0xa6, 0x32, 0x6a, 0xda, 0x32, 0x60, 0x11, 0x4b, 0xfd, 0xa9, 0x18, 0x59, 0xa2, 0x32, 0x98, 0x20, 0x71, 0xbf, 
	0xda, 0x97, 0x63, 0x82, 0x99, 0x81, 0x23, 0x4a, 0xc9, 0x12, 0x49, 0xb6, 0x36, 0x29, 0x1d, 0x61, 0x21, 0x99, 0x38, 0x23, 0x24, 0x19, 0x4a, 0x93, 0x26, 0x28, 0x07, 0x12, 0x14, 0x42, 0x21, 0x46, 
	0x12, 0x23, 0x27, 0x18, 0x04, 0x12, 0x04, 0x2a, 0x24, 0x24, 0x18, 0x17, 0x42, 0x24, 0x48, 0x96, 0x31, 0x23, 0x49, 0x42, 0x27, 0x04, 0x12, 0x28, 0x94, 0x22, 0x0d, 0x1b, 0x3e, 0x62, 0xc2, 0x05, 
	0x1e, 0xfd, 0xa9, 0x18, 0x19, 0x61, 0x20, 0x47, 0x04, 0x1b, 0x23, 0x21, 0x97, 0x88, 0x9d, 0xcb, 0xe1, 0x10, 0x3b, 0x24, 0xf1, 0xb9, 0xf6, 0x32, 0x4a, 0x84, 0x23, 0x27, 0x14, 0x31, 0x64, 0x23, 
	0x24, 0x91, 0x80, 0x75, 0x73, 0x83, 0x26, 0x29, 0x24, 0x23, 0x28, 0x04, 0x22, 0x16, 0x71, 0x25, 0x34, 0x72, 0x34, 0x27, 0x38, 0x32, 0x62, 0x90, 0x61, 0x21, 0x49, 0x18, 0x49, 0xa6, 0x32, 0x1a, 
	0x49, 0x96, 0x24, 0x1f, 0x92, 0x24, 0xca, 0x62, 0x36, 0x94, 0x87, 0x62, 0x4a, 0xdc, 0xfb, 0x11, 0x00, 0xe1, 0x00, 0x21, 0x23, 0x6a, 0x98, 0x19, 0x4d, 0xcb, 0xe1, 0x10, 0x64, 0x24, 0xcd, 0x93, 
	0x12, 0x08, 0x18, 0x39, 0x96, 0x31, 0x21, 0x68, 0x12, 0x04, 0x27, 0x04, 0x12, 0x46, 0x43, 0x27, 0x38, 0x82, 0x2d, 0x62, 0x32, 0x49, 0x18, 0x07, 0x47, 0x68, 0x89, 0xad, 0xcf, 0x1e, 0x21, 0x1e, 
	0x1b, 0x3c, 0xda, 0x91, 0x81, 0x78, 0x47, 0x28, 0x89, 0x22, 0x24, 0xd8, 0x12, 0x08, 0x38, 0x04, 0x42, 0x07, 0x27, 0x42, 0x26, 0x94, 0x22, 0x09, 0x38, 0x04, 0x12, 0x34, 0xad, 0xa1, 0x20, 0xc2, 
	0x14, 0xbf, 0xda, 0x91, 0x81, 0x9a, 0x22, 0x1d, 0x1d, 0x10, 0x01, 0x1e, 0x4f, 0xcd, 0xa9, 0x12, 0x18, 0x94, 0x82, 0x22, 0x41, 0xa0, 0x91, 0x22, 0x9c, 0x91, 0x23, 0x89, 0xad, 0x12, 0x16, 0xa3, 
	0x90, 0x62, 0x20, 0x81, 0x90, 0x81, 0x20, 0x73, 0x74, 0x22, 0x47, 0x41, 0x22, 0x48, 0x62, 0x20, 0x81, 0x90, 0x61, 0x20, 0x82, 0x92, 0x22, 0x41, 0x80, 0x74, 0x70, 0x81, 0x80, 0x21, 0x24, 0x49, 
	0x42, 0x41, 0x73, 0x43, 0x28, 0x19, 0x02, 0x12, 0x1d, 0xc1, 0xf3, 0xd2, 0x61, 0x10, 0x51, 0xbf, 0xda, 0x91, 0x80, 0x92, 0x21, 0xc1, 0x50, 0x11, 0xa2, 0x20, 0x91, 0x85, 0x9a, 0xdf, 0xe1, 0x10, 
	0x46, 0x26, 0xbf, 0x1c, 0x06, 0x12, 0x36, 0xa8, 0x61, 0x20, 0x71, 0x71, 0x22, 0x18, 0x02, 0x12, 0x08, 0x18, 0x17, 0x76, 0x82, 0x42, 0x41, 0x93, 0x84, 0x24, 0x19, 0x18, 0x62, 0x21, 0x88, 0x22, 
	0x47, 0x74, 0x24, 0x27, 0x18, 0x61, 0x20, 0x91, 0x90, 0x42, 0x22, 0x89, 0x81, 0x94, 0xd4, 0x24, 0xd1, 0x95, 0x42, 0x6d, 0xc4, 0x12, 0x2a, 0xa9, 0x12, 0x04, 0x28, 0x09, 0x19, 0x24, 0x26, 0x2d, 
	0x4c, 0xfb, 0xe1, 0xd1, 0x01, 0x14, 0x12, 0x36, 0xa9, 0x81, 0x94, 0xdc, 0xbe, 0x11, 0x00, 0x61, 0x22, 0xca, 0x62, 0x20, 0x42, 0x81, 0x96, 0x22, 0x4a, 0x94, 0x24, 0x37, 0x02, 0x12, 0x34, 0x78, 
	0x72, 0x84, 0x22, 0x6a, 0x92, 0x22, 0x89, 0x81, 0x70, 0x85, 0x86, 0x9a, 0xdc, 0xfb, 0xe1, 0x14, 0x01, 0xeb, 0xf1, 0xc1, 0xaa, 0x49, 0x08, 0x48, 0x19, 0x61, 0x23, 0x6d, 0xa6, 0x12, 0x36, 0x78, 
	0x71, 0x80, 0x61, 0x20, 0x72, 0x70, 0x41, 0x22, 0x8a, 0x82, 0x20, 0x92, 0x82, 0x22, 0x41, 0x21, 0x6d, 0x12, 0x06, 0x10, 0x61, 0x1b, 0xfd, 0xa9, 0x18, 0x19, 0x92, 0x20, 0xfd, 0x10, 0x41, 0xeb, 
	0xfc, 0x3d, 0x26, 0x24, 0x19, 0x38, 0x98, 0x61, 0x20, 0x81, 0x90, 0x61, 0x20, 0xd1, 0xd4, 0x42, 0x48, 0xa1, 0x24, 0x4d, 0xa9, 0x81, 0x96, 0x22, 0x62, 0x49, 0x61, 0x21, 0x68, 0x27, 0x24, 0x23, 
	0x27, 0x22, 0x24, 0x18, 0x22, 0x24, 0x39, 0x42, 0x24, 0x89, 0x12, 0x04, 0x49, 0x08, 0x28, 0x07, 0x18, 0x04, 0x12, 0x26, 0x96, 0x12, 0x16, 0x81, 0x23, 0x48, 0x9a, 0x22, 0xed, 0xdc, 0xfb, 0x62, 
	0xa0, 0x1e, 0xbc, 0xa9, 0x18, 0x19, 0x41, 0x21, 0x9e, 0x50, 0x1b, 0xd2, 0x20, 0x81, 0x88, 0x9d, 0xcb, 0x1e, 0x92, 0x41, 0xf0, 0xc1, 0xd0, 0x91, 0x24, 0x6a, 0x98, 0x44, 0x22, 0x68, 0x92, 0x21, 
	0x88, 0x27, 0x28, 0x9a, 0x1d, 0x0a, 0x1d, 0x04, 0x52, 0x08, 0x29, 0x06, 0x12, 0x24, 0x98, 0x12, 0x04, 0x27, 0x24, 0x24, 0x17, 0x28, 0x86, 0x52, 0x08, 0x12, 0x08, 0x18, 0x39, 0xac, 0x44, 0x24, 
	0x49, 0xad, 0x61, 0x20, 0x91, 0x90, 0x81, 0x21, 0x69, 0x18, 0x09, 0x12, 0x16, 0xc3, 0xd4, 0xcf, 0xbe, 0x1d, 0x10, 0x06, 0x12, 0x24, 0xa9, 0x18, 0x59, 0xac, 0xbe, 0x11, 0x01, 0x16, 0x42, 0x16, 
	0x81, 0x20, 0x61, 0x80, 0x61, 0x23, 0x4a, 0x96, 0x12, 0x07, 0x17, 0x18, 0x92, 0x24, 0x68, 0x76, 0x41, 0x20, 0x61, 0xa0, 0xd2, 0x20, 0x81, 0x83, 0x77, 0x89, 0x1a, 0x1d, 0xa2, 0xd2, 0xcc, 0xb1, 
	0xe1, 0x11, 0x20, 0x11, 0x11, 0xe0, 0xb1, 0xf0, 0xc4, 0xc0, 0xa1, 0x94, 0x87, 0x89, 0x61, 0x20, 0x62, 0xa1, 0x94, 0x62, 0x16, 0x91, 0x81, 0x76, 0x12, 0x16, 0x81, 0xa4, 0x22, 0x48, 0x62, 0x22, 
	0x88, 0x63, 0x21, 0x9e, 0x10, 0x61, 0x1b, 0xfd, 0xa9, 0x18, 0x19, 0x61, 0x20, 0x4d, 0x10, 0x61, 0xeb, 0xfc, 0xda, 0x1d, 0x2c, 0xc6, 0x12, 0x06, 0x18, 0x02, 0x12, 0x19, 0x81, 0x92, 0x42, 0x41, 
	0xa1, 0x98, 0x42, 0x56, 0xfa, 0x98, 0x62, 0x21, 0x99, 0x42, 0x19, 0x91, 0x80, 0x71, 0x20, 0x43, 0x74, 0x22, 0x69, 0x81, 0x20, 0x63, 0x90, 0x84, 0x21, 0x6f, 0x3c, 0x2d, 0xd9, 0x18, 0x07, 0x18, 
	0x06, 0x12, 0x06, 0x18, 0x06, 0x32, 0x44, 0x98, 0xad, 0x12, 0x06, 0x2d, 0x0c, 0x1f, 0x72, 0x26, 0x0b, 0xfd, 0x92, 0x80, 0x21, 0x21, 0xf1, 0x50, 0x21, 0xb4, 0x22, 0x38, 0x8a, 0xd1, 0xf2, 0x62, 
	0x41, 0xb0, 0xc3, 0xd3, 0x62, 0x6d, 0x19, 0x18, 0x81, 0x21, 0x46, 0x28, 0x04, 0x12, 0x28, 0x87, 0x18, 0x39, 0xac, 0xf3, 0xb2, 0xfc, 0x61, 0x20, 0x62, 0x80, 0x91, 0x98, 0x42, 0x4a, 0x97, 0x24, 
	0x81, 0x71, 0x87, 0x12, 0x54, 0x89, 0xad, 0x61, 0x20, 0x42, 0x80, 0x62, 0x25, 0x69, 0xdc, 0xf6, 0x12, 0x36, 0x89, 0x81, 0x94, 0x42, 0x69, 0x81, 0x90, 0x65, 0x20, 0x61, 0xc2, 0xdd, 0xa1, 0xd4, 
	0xcf, 0xbe, 0x1c, 0x10, 0x0c, 0x22, 0x1a, 0x91, 0x85, 0x9a, 0xcf, 0xe1, 0x20, 0x21, 0xb6, 0x12, 0x06, 0x28, 0x04, 0x22, 0x76, 0x42, 0x6a, 0x98, 0x71, 0x20, 0x61, 0x80, 0x91, 0xa0, 0x63, 0x22, 
	0x68, 0x93, 0xa0, 0x61, 0x20, 0x93, 0x83, 0x9a, 0xcf, 0x6b, 0x1e, 0xe1, 0x10, 0x06, 0x00, 0x12, 0x10, 0xe3, 0xe4, 0xbf, 0xda, 0x92, 0x83, 0x96, 0x26, 0x2a, 0x19, 0x93, 0x81, 0x9a, 0x1d, 0x1a, 
	0x91, 0x80, 0x41, 0x21, 0x98, 0x19, 0x3a, 0xa9, 0x61, 0x20, 0x61, 0x80, 0x71, 0x84, 0xac, 0xfb, 0x12, 0x05, 0x1e, 0xbc, 0xd9, 0x18, 0x29, 0xa4, 0x12, 0x1a, 0x1b, 0x10, 0x21, 0x1e, 0x1f, 0x1d, 
	0xd2, 0xa4, 0xda, 0xd9, 0x62, 0x21, 0x6a, 0x39, 0x1a, 0x62, 0x90, 0x82, 0x81, 0x9d, 0x2c, 0x2a, 0x98, 0x12, 0x06, 0x38, 0x59, 0xad, 0xcd, 0xa1, 0x93, 0x62, 0x69, 0x68, 0x09, 0x19, 0x32, 0x6a, 
	0x94, 0x83, 0x9d, 0xcb, 0x4e, 0x4b, 0xfd, 0xa9, 0x38, 0x26, 0x26, 0x38, 0x09, 0x2a, 0x09, 0x19, 0x3a, 0xc6, 0xc1, 0xd0, 0xa1, 0xd3, 0xcf, 0xb6, 0x12, 0x46, 0xa9, 0x84, 0x22, 0x2d, 0xe1, 0x50, 
	0x01, 0x1b, 0x06, 0x72, 0x3d, 0xbf, 0xc4, 0xd0, 0xc1, 0xf0, 0xc1, 0xa0, 0x93, 0xa0, 0x94, 0x81, 0x99, 0x38, 0x5a, 0xdf, 0xbe, 0x12, 0x04, 0xeb, 0xcd, 0xa3, 0x82, 0x99, 0xa1, 0xd1, 0xaa, 0x19, 
	0x08, 0x18, 0x09, 0x29, 0x1a, 0xa2, 0x90, 0xa2, 0xd1, 0xa9, 0x78, 0x19, 0xa2, 0xc1, 0xda, 0x38, 0x09, 0x4a, 0x19, 0x93, 0xa0, 0x93, 0x90, 0xa2, 0xa6, 0xdd, 0xcf, 0xbe, 0x1b, 0x10, 0x21, 0xec, 
	0x12, 0x16, 0x91, 0x85, 0x9a, 0xcf, 0xe1, 0x20, 0x51, 0x1b, 0xfd, 0xa8, 0x18, 0x09, 0x59, 0x04, 0x12, 0x18, 0x91, 0xa3, 0xdd, 0xa9, 0x38, 0x09, 0x4a, 0x1d, 0xa1, 0x97, 0x89, 0xad, 0xfb, 0xe1, 
	0x93, 0x04, 0x11, 0xef, 0xc1, 0xa1, 0x99, 0x1a, 0x0d, 0x1d, 0x0a, 0x1a, 0x29, 0x98, 0x19, 0x0a, 0x2d, 0x0a, 0x19, 0x28, 0x24, 0x1a, 0x09, 0x49, 0x08, 0x19, 0x08, 0x38, 0x59, 0xac, 0xfb, 0x13, 
	0x05, 0x1e, 0xbc, 0xa9, 0x18, 0x59, 0xa6, 0x9b, 0xec, 0x10, 0x51, 0x1e, 0xbf, 0xc1, 0xd0, 0xa1, 0xa2, 0x99, 0x81, 0x90, 0xd2, 0xd0, 0xa1, 0xa0, 0xd1, 0xd0, 0xa1, 0x94, 0x88, 0x9a, 0xd1, 0xc1, 
	0xdd, 0x39, 0x08, 0x28, 0x49, 0x9a, 0xdc, 0x1d, 0x0a, 0x2a, 0x1d, 0xd1, 0xa1, 0x9a, 0x39, 0x1a, 0xd1, 0xc1, 0xda, 0x19, 0x78, 0x89, 0xac, 0xfb, 0x12, 0x06, 0x11, 0xef, 0xcd, 0xa2, 0x91, 0xaa, 
	0x19, 0x38, 0x89, 0xa3, 0xd3, 0xaa, 0xdc, 0x2f, 0x0c, 0x1d, 0x0a, 0x1d, 0x1c, 0xc1, 0xf1, 0x66, 0x22, 0x54, 0x9c, 0xfe, 0x15, 0x04, 0x1e, 0xbc, 0xd1, 0x90, 0x81, 0x90, 0xd3, 0xd0, 0xa2, 0xd0, 
	0xc1, 0xf1, 0xbf, 0x1c, 0x1d, 0xd3, 0xc0, 0xd4, 0xa0, 0xd3, 0xa5, 0xdd, 0xfb, 0xe1, 0x30, 0x51, 0xef, 0xcd, 0xa1, 0x94, 0xaa, 0xdc, 0xf1, 0xc0, 0xd2, 0xa1, 0xda, 0x1d, 0x4c, 0xcd, 0xcd, 0x1a, 
	0x0d, 0x2c, 0x2d, 0xd9, 0x4a, 0x19, 0x91, 0xa4, 0xcc, 0xfc, 0xd1, 0xa0, 0x91, 0xa0, 0xd1, 0xc0, 0xd2, 0xd0, 0xc1, 0xc1, 0xda, 0x39, 0x1a, 0xa1, 0xd3, 0xcf, 0xbe, 0x11, 0x00, 0xc1, 0x04, 0x1e, 
	0xfc, 0xd2, 0x94, 0xad, 0xfb, 0x14, 0x04, 0x1e, 0xbc, 0xd6, 0xa0, 0x93, 0x91, 0xaa, 0x4d, 0x39, 0x9a, 0xd2, 0xc0, 0xd1, 0xa0, 0x92, 0xa0, 0xd3, 0xc1, 0xdd, 0x1a, 0x5d, 0xcf, 0xbe, 0x1c, 0x30, 
	0x41, 0xeb, 0xfc, 0x2d, 0x0c, 0x2f, 0x0c, 0x1c, 0x0d, 0x2d, 0x1c, 0xc1, 0xf4, 0xcd, 0xa9, 0xa1, 0xd0, 0xc1, 0xc1, 0xdd, 0x3a, 0x2d, 0xdc, 0x4d, 0x4f, 0xfb, 0xe1, 0x40, 0x41, 0xef, 0xcd, 0x19, 
	0x5a, 0xac, 0xbe, 0x1e, 0x10, 0x41, 0x1e, 0xbf, 0x1c, 0x0d, 0x4a, 0x0d, 0x1c, 0x1f, 0xf2, 0xc0, 0xf2, 0xf0, 0xc3, 0xd0, 0xc2, 0xf0, 0xc9, 0x1d, 0x1c, 0xc1, 0xf1, 0xcc, 0x1d, 0x1c, 0xc3, 0xf0, 
	0xc1, 0xc0, 0xd1, 0xd1, 0xcc, 0x3f, 0x0c, 0x2d, 0x5c, 0xcf, 0xbe, 0x14, 0x04, 0x1e, 0xbf, 0xc2, 0xd0, 0xc1, 0xc0, 0xd2, 0xd0, 0xc3, 0xf1, 0xcc, 0x1f, 0x0b, 0x2b, 0x1f, 0xc1, 0xd1, 0xad, 0x2a, 
	0x19, 0x91, 0x85, 0x9a, 0xdf, 0xbe, 0x70, 0x51, 0xeb, 0xcd, 0xa4, 0x91, 0xaa, 0x2d, 0x2c, 0xfb, 0x3e, 0x3b, 0xfb, 0xf3, 0xb0, 0xf7, 0xf0, 0xc1, 0xf1, 0xbb, 0x11, 0x00, 0x30, 0x31, 0x1e, 0xb1, 
	0xf1, 0xcc, 0x1f, 0x3b, 0xbe, 0xb1, 0xf0, 0xc4, 0xf0, 0xb2, 0xb0, 0xf1, 0xf0, 0xc2, 0xf1, 0xbb, 0x1f, 0x1c, 0xc2, 0xf0, 0xc2, 0xc0, 0xf3, 0xb2, 0xff, 0xc2, 0xf0, 0xb1, 0xb3, 0xff, 0xbf, 0x1b, 
	0x0f, 0x1c, 0x0d, 0x2d, 0x1c, 0xf1, 0xb0, 0xe1, 0x10, 0x0e, 0x10, 0x11, 0xe1, 0xf0, 0xd1, 0xa5, 0xdd, 0xfb, 0xe1, 0x40, 0x21, 0x1e, 0x1b, 0x0f, 0x5f, 0x0c, 0x1c, 0x0d, 0x2c, 0x0f, 0x1f, 0x0c, 
	0x1d, 0x0a, 0x1d, 0x2c, 0xfb, 0x1f, 0x0c, 0x2c, 0x1f, 0xf3, 0xb2, 0xff, 0xc1, 0xf1, 0xbb, 0x11, 0x00, 0xd3, 0x00, 0x11, 0xe0, 0xb3, 0xb0, 0xe2, 0xe0, 0xb5, 0xb4, 0xee, 0xbf, 0xc1, 0xd2, 0xcc, 
	0xf3, 0xb0, 0xf3, 0xf0, 0xb6, 0xb1, 0xee, 0x11, 0x00, 0x50, 0x11, 0xe1, 0xf1, 0xcd, 0x1c, 0x3f, 0xbe, 0x18, 0x20, 0x21, 0x1e, 0x1b, 0x1f, 0xf2, 0xc0, 0xf1, 0xb0, 0xe1, 0xe0, 0xb1, 0xb0, 0xe3, 
	0xe0, 0xb2, 0xb0, 0xe1, 0xe1, 0xbb, 0x2f, 0x0b, 0x6b, 0x0e, 0x1e, 0x2b, 0xbf, 0x2b, 0x0e, 0x4e, 0x0b, 0x4b, 0x0e, 0x2e, 0x0b, 0x3b, 0x1e, 0xe1, 0x10, 0x05, 0x00, 0x11, 0xe0, 0xb1, 0xb0, 0xf6, 
	0xb0, 0xe4, 0xe0, 0xb2, 0xe2, 0x11, 0xe1, 0xb2, 0xff, 0xc1, 0xd1, 0xaa, 0x19, 0x7a, 0xad, 0xcf, 0xbe, 0x18, 0x10, 0x31, 0xeb, 0xf1, 0xc0, 0xd3, 0xd1, 0xcc, 0x1f, 0x1b, 0xe5, 0x11, 0xee, 0x51, 
	0x1e, 0xe1, 0x11, 0xe1, 0x5e, 0x11, 0x17, 0x00, 0x11, 0x10, 0xe2, 0xe0, 0x12, 0x10, 0xe6, 0xe0, 0x13, 0x10, 0xe5, 0xe6, 0x1e, 0x1e, 0x1e, 0x12, 0xe1, 0xbb, 0x3e, 0x31, 0xe1, 0xe5, 0x11, 0xee, 
	0x11, 0x1e, 0x12, 0xe0, 0xb4, 0xb1, 0xee, 0x11, 0x00, 0x82, 0x03, 0x11, 0xeb, 0x1f, 0x0c, 0x1f, 0x2e, 0xe1, 0x70, 0x01, 0x21, 0x1e, 0xe1, 0x10, 0xe1, 0xe0, 0xb2, 0xb0, 0xe1, 0xe2, 0x1e, 0xb1, 
	0xf0, 0xc1, 0xf0, 0xb1, 0xe0, 0x15, 0xe0, 0x12, 0x10, 0xe5, 0xe1, 0x11, 0x84, 0x00, 0x12, 0x10, 0xe3, 0x10, 0x08, 0x10, 0x11, 0xe1, 0xb0, 0xf2, 0xb0, 0xe3, 0x11, 0xe1, 0x1e, 0x01, 0x21, 0x00, 
	0xe1, 0x01, 0x11, 0x1e, 0x0b, 0x2b, 0x2e, 0xe1, 0xc2, 0x00, 0x12, 0x10, 0xe2, 0xe0, 0x18, 0x11, 0x10, 0x02, 0x10, 0x02, 0x00, 0x11, 0x10, 0xe4, 0x10, 0x04, 0x00, 0x12, 0x11, 0xee, 0x21, 0x10, 
	0x04, 0x10, 0xe4, 0x10, 0x09, 0x20, 0x01, 0x21, 0x0e, 0x31, 0x00, 0x60, 0x01, 0x21, 0x00, 0x30, 0x11, 0x11, 0xe0, 0xb2, 0xf0, 0xc2, 0xc1, 0xfb, 0x1e, 0x11, 0x1a, 0x10, 0x11, 0x11, 0xe0, 0xb2, 
	0xb0, 0xf1, 0xb1, 0xee, 0x21, 0x00, 0x8d, 0x10, 0x01, 0xf2, 0x00, 0x11, 0x10, 0xe3, 0xe1, 0x11, 0xa3, 0x00, 0x11, 0x10, 0xe4, 0xe1, 0x11, 0x89, 0x10, 0x01, 0x21, 0x0e, 0x21, 0x00, 0xc3, 0x00, 
	0x16, 0x10, 0x0c, 0x82, 0x00, 0x12, 0x10, 0xe3, 0xe0, 0x11, 0x10, 0x08, 0xc7, 0x00, 
}; // 3616 bytes

#endif